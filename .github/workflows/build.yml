name: Build Executables

on:
  push:
    branches:
      - qt6
  pull_request:
    branches:
      - qt6

jobs:
  # ------------------------------
  # 1) BUILD ON WINDOWS
  # ------------------------------
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install VLC
        run: choco install vlc -y

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller appdirs

      - name: Build EXE
        shell: powershell
        run: |
          pyinstaller --windowed `
            --icon=assets/logo.ico `
            --hidden-import PyQt6.QtWebEngineCore `
            --hidden-import PyQt6.QtWebEngineWidgets `
            --add-binary "C:/Program Files/VideoLAN/VLC/libvlc.dll;." `
            --add-binary "C:/Program Files/VideoLAN/VLC/libvlccore.dll;." `
            --add-data "C:/Program Files/VideoLAN/VLC/plugins;plugins" `
            TMP-Networks-Browser-Mini.py

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: TMP-Networks-Browser-Mini-Windows-Executable
          path: dist/TMP-Networks-Browser-Mini.exe

  # ------------------------------
  # 2) BUILD ON macOS
  # ------------------------------
  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify Icon File Exists
        run: |
          if [ ! -f assets/logo.icns ]; then
            echo "Error: assets/logo.icns not found!"
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install VLC
        run: brew install --cask vlc

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller appdirs

      - name: Find public_suffix_list.dat
        id: find_public_suffix
        run: |
          PUBLIC_SUFFIX_PATH=$(python -c "import whois, os; print(os.path.join(os.path.dirname(whois.__file__), 'data', 'public_suffix_list.dat'))")
          echo "::set-output name=path::$PUBLIC_SUFFIX_PATH"

      - name: Build macOS App
        run: |
          # Entferne vorherige Builds
          rm -rf build dist
          
          # Finde den Pfad zu public_suffix_list.dat aus dem vorherigen Schritt
          PUBLIC_SUFFIX_PATH=${{ steps.find_public_suffix.outputs.path }}
          
          # Überprüfen, ob die Datei existiert
          if [ ! -f "$PUBLIC_SUFFIX_PATH" ]; then
            echo "Error: public_suffix_list.dat not found at $PUBLIC_SUFFIX_PATH"
            exit 1
          fi
          
          # Baue die App mit PyInstaller und füge die Daten-Datei hinzu
          pyinstaller --windowed \
            --icon=assets/logo.icns \
            --hidden-import PyQt6.QtWebEngineCore \
            --hidden-import PyQt6.QtWebEngineWidgets \
            --add-binary "/Applications/VLC.app/Contents/MacOS/lib/libvlc.dylib:." \
            --add-binary "/Applications/VLC.app/Contents/MacOS/lib/libvlccore.dylib:." \
            --add-data "/Applications/VLC.app/Contents/MacOS/plugins:plugins" \
            --add-data "$PUBLIC_SUFFIX_PATH:whois/data" \
            TMP-Networks-Browser-Mini.py

      - name: List dist Directory
        run: |
          echo "Inhalt von dist/:"
          ls -la dist/

      - name: Check Write Permissions
        run: |
          echo "Überprüfe Schreibrechte im Application Support-Verzeichnis:"
          python -c "import appdirs, os; dirs = appdirs.AppDirs('TMPNetworksBrowserMini', 'DeinName'); print(dirs.user_data_dir)"
          python -c "import appdirs, os; dirs = appdirs.AppDirs('TMPNetworksBrowserMini', 'DeinName'); os.makedirs(dirs.user_data_dir, exist_ok=True); open(os.path.join(dirs.user_data_dir, 'test_write.txt'), 'w').close()"

      - name: Compress .app for Artifact
        run: |
          # Komprimiere die fertige App als ZIP
          cd dist
          ditto -c -k --sequesterRsrc --keepParent "TMP-Networks-Browser-Mini.app" \
                "TMP-Networks-Browser-Mini-macOS.zip"

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: TMP-Networks-Browser-Mini-macOS
          path: dist/TMP-Networks-Browser-Mini-macOS.zip
