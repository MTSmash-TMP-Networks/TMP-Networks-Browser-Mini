name: Build Executables

on:
  push:
    branches:
      - qt6
  pull_request:
    branches:
      - qt6

jobs:
  # ------------------------------
  # BUILD ON LINUX WITH DOCKER
  # ------------------------------
  build-linux:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          apt-get update && apt-get install -y \
            python3.11 python3.11-distutils python3-pip \
            build-essential pkg-config libvlc-dev vlc \
            curl wget

          # Install PyInstaller
          python3.11 -m pip install --upgrade pip
          python3.11 -m pip install pyinstaller appdirs

      - name: Verify VLC Installation Path
        run: |
          LIBVLC_PATH=$(ldconfig -p | grep libvlc.so | head -n 1 | awk '{print $4}')
          if [ -f "$LIBVLC_PATH" ]; then
            echo "libvlc.so gefunden unter $LIBVLC_PATH."
          else
            echo "libvlc.so nicht gefunden."
            exit 1
          fi

          LIBVLCCORE_PATH=$(ldconfig -p | grep libvlccore.so | head -n 1 | awk '{print $4}')
          if [ -f "$LIBVLCCORE_PATH" ]; then
            echo "libvlccore.so gefunden unter $LIBVLCCORE_PATH."
          else
            echo "libvlccore.so nicht gefunden."
            exit 1
          fi

          PLUGINS_PATH=$(dirname "$LIBVLC_PATH")/vlc/plugins
          if [ -d "$PLUGINS_PATH" ]; then
            echo "VLC Plugins gefunden unter $PLUGINS_PATH."
          else
            if [ -d "/usr/lib/vlc/plugins" ]; then
              PLUGINS_PATH="/usr/lib/vlc/plugins"
            elif [ -d "/usr/lib/x86_64-linux-gnu/vlc/plugins" ]; then
              PLUGINS_PATH="/usr/lib/x86_64-linux-gnu/vlc/plugins"
            else
              echo "VLC Plugins nicht gefunden unter den erwarteten Verzeichnissen."
              exit 1
            fi
          fi

          echo "LIBVLC_PATH=$LIBVLC_PATH" >> $GITHUB_ENV
          echo "LIBVLCCORE_PATH=$LIBVLCCORE_PATH" >> $GITHUB_ENV
          echo "PLUGINS_PATH=$PLUGINS_PATH" >> $GITHUB_ENV

      - name: Find public_suffix_list.dat
        id: find_public_suffix
        run: |
          PUBLIC_SUFFIX_PATH=$(python3.11 -c "import whois, os; print(os.path.join(os.path.dirname(whois.__file__), 'data', 'public_suffix_list.dat'))")
          echo "PUBLIC_SUFFIX_PATH=$PUBLIC_SUFFIX_PATH" >> $GITHUB_ENV

      - name: Verify public_suffix_list.dat Exists
        run: |
          if [ ! -f "$PUBLIC_SUFFIX_PATH" ]; then
            echo "public_suffix_list.dat nicht gefunden unter $PUBLIC_SUFFIX_PATH"
            exit 1
          else
            echo "public_suffix_list.dat gefunden."
          fi

      - name: Build Executable
        run: |
          pyinstaller --onefile \
            --windowed \
            --icon=assets/logo.png \
            --hidden-import PyQt6.QtWebEngineCore \
            --hidden-import PyQt6.QtWebEngineWidgets \
            --add-binary "$LIBVLC_PATH:." \
            --add-binary "$LIBVLCCORE_PATH:." \
            --add-data "$PLUGINS_PATH:plugins" \
            --add-data "$PUBLIC_SUFFIX_PATH:whois/data" \
            TMP-Networks-Browser-Mini.py

          echo "Inhalt von dist/:"
          ls -R dist/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: TMP-Networks-Browser-Mini-Linux-Executable
          path: dist/TMP-Networks-Browser-Mini
          if-no-files-found: warn
